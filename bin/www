#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../server').app
var debug = require('debug')('myapp:server')
var http = require('http')
require('dotenv').config()

/**
 *	helper function to log date+text to console:
 */
const log = (text) => {
	console.log(`[${new Date().toLocaleString()}] ${text}`)
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8888')
app.set('port', port)

/**
 * Create HTTP server.
 */
var server = require('../server').server

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10)
  // check if port is number
  if (isNaN(port)) {
    // named pipe
    return val
  }
  // check if port is a positive number
  if (port >= 0) {
    // port number
    return port
  }
  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log(`Error: ${bind} requires elevated privileges`)
      // console.error(bind + ' requires elevated privileges')
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log(`Error: ${bind} is already in use`)
      // console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
